        // // -------------9 node 4d example: Same sized cliques, different weights-------------
        // // Initialize a 4D tensor M with zeros using xtensor
        // const int n_set = 9;
        // xt::xarray<double> M = xt::zeros<double>({n_set, n_set, n_set, n_set});
    
        // // Map to track occurrences of sorted indices
        // std::map<std::array<int, 4>, int> x_tracker;
    
        // // Generate permutations for [0, 1, 2, 3, 4] taken 4 at a time
        // std::vector<int> set1 = {0, 1, 2, 3, 4};
        // std::vector<std::vector<int>> idxs;
        // generatePermutations(set1, 4, idxs);
    
        // for (const auto& idx : idxs) {
        //     std::array<int, 4> key = {idx[0], idx[1], idx[2], idx[3]};
        //     std::sort(key.begin(), key.end());
    
        //     if (x_tracker.find(key) != x_tracker.end()) {
        //         x_tracker[key]++;
        //     } else {
        //         x_tracker[key] = 0;
        //     }
        //     M(idx[0], idx[1], idx[2], idx[3]) = 0.5;
        // }
    
        // // Generate permutations for [5, 6, 7, 8] taken 4 at a time
        // std::vector<int> set2 = {4, 5, 6, 7, 8};
        // idxs.clear();
        // generatePermutations(set2, 4, idxs);
    
        // for (const auto& idx : idxs) {
        //     std::array<int, 4> key = {idx[0], idx[1], idx[2], idx[3]};
        //     std::sort(key.begin(), key.end());
    
        //     if (x_tracker.find(key) != x_tracker.end()) {
        //         x_tracker[key]++;
        //     } else {
        //         x_tracker[key] = 0;
        //     }
    
        //     M(idx[0], idx[1], idx[2], idx[3]) = 2.0;
        // }
    
        // // Normalize M by dividing by the maximum value in M
        // double max_value = xt::amax(M)();
        // M /= max_value;
    
        // // Set identity on the diagonal
        // for (int i = 0; i < n_set; ++i) {
        //     M(i, i, i, i) = 1.0;
        // }
    
        // // -------------7 node 3d example-------------
        // // GMC::KUniformHypergraph<int> graph(3);
        // // graph.add_nodes({0, 1, 2, 3, 4, 5, 6});
        // // graph.add_edge({0, 1, 4});
        // // graph.add_edge({0, 1, 3});
        // // graph.add_edge({0, 3, 4});
        // // graph.add_edge({1, 3, 4});
        // // graph.add_edge({0, 2, 4});
        // // graph.add_edge({4, 5, 6});
        // // graph.add_edge({3, 4, 6});
    
        // // -------------9 node 4d example-------------
        // // GMC::KUniformHypergraph<int> graph(4);
        // // graph.add_nodes({0, 1, 2, 3, 4, 5, 6, 7, 8});
        // // graph.add_edge({0, 1, 2, 3});
        // // graph.add_edge({0, 1, 2, 4});
        // // graph.add_edge({0, 1, 3, 4});
        // // graph.add_edge({0, 2, 3, 4});
        // // graph.add_edge({1, 2, 3, 4});
        // // graph.add_edge({5, 6, 7, 8});
    
        // // -------------12 node 2d example-------------
        // xt::xarray<double> M = {
        //     {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
        //     {0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        //     {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        //     {0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
        //     {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0},
        //     {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
        //     {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        //     {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
        //     {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
        //     {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
        //     {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
        //     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}
        // };
        // int num_nodes = 12;
        // GMC::KUniformHypergraph<int> graph(2);
        // graph.add_nodes({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11});
        // int cell;
        // int col_start = 1;
        // for (int row = 0; row < num_nodes; row++) {
        //     for (int col = col_start; col < num_nodes; col++) {
        //         cell = M(row,col);
        //         if (cell == 1) {
        //             graph.add_edge({row, col});
        //         }
        //     };
        //     col_start++;
        // };
    
        // // Create a Fastor tensor from the xtensor using the template function
        // std::vector<double> M_values(M.data(), M.data() + M.size());
        // auto fastor_M = createFastorTensor<double, 12, 12>(M_values);
    
        // -------------7 node 3d example-------------
        // // xt::xarray<double> M = {
        // // {{1, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 1, 1, 0, 0},
        // //  {0, 0, 0, 0, 1, 0, 0},
        // //  {0, 1, 0, 0, 1, 0, 0},
        // //  {0, 1, 1, 1, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0}},
    
        // // {{0, 0, 0, 1, 1, 0, 0},
        // //  {0, 1, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {1, 0, 0, 0, 1, 0, 0},
        // //  {1, 0, 0, 1, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0}},
    
        // // {{0, 0, 0, 0, 1, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 1, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {1, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0}},
    
        // // {{0, 1, 0, 0, 1, 0, 0},
        // //  {1, 0, 0, 0, 1, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 1, 0, 0, 0},
        // //  {1, 1, 0, 0, 0, 0, 1},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 1, 0, 0}},
    
        // // {{0, 1, 1, 1, 0, 0, 0},
        // //  {1, 0, 0, 1, 0, 0, 0},
        // //  {1, 0, 0, 0, 0, 0, 0},
        // //  {1, 1, 0, 0, 0, 0, 1},
        // //  {0, 0, 0, 0, 1, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 1},
        // //  {0, 0, 0, 1, 0, 1, 0}},
    
        // // {{0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 1},
        // //  {0, 0, 0, 0, 0, 1, 0},
        // //  {0, 0, 0, 0, 1, 0, 0}},
    
        // // {{0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 0},
        // //  {0, 0, 0, 0, 1, 0, 0},
        // //  {0, 0, 0, 1, 0, 1, 0},
        // //  {0, 0, 0, 0, 1, 0, 0},
        // //  {0, 0, 0, 0, 0, 0, 1}}
        // // };
    
        // -------------20 node 2d example-------------
        // // xt::xarray<double> M = {
        // //     {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2964, 0.0},
        // //     {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        // //     {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0747, 0.0},
        // //     {0.0, 0.0, 0.0, 1.0, 0.0, 0.0555, 0.2547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0102, 0.0, 0.7715, 0.0, 0.0, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 1.0, 0.0063, 0.0, 0.3846, 0.0, 0.0003, 0.0014, 0.0, 0.0, 0.0, 0.0, 0.0063, 0.0, 0.0, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0555, 0.0063, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9927, 0.0, 0.0, 0.9722, 0.0, 0.0, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.2547, 0.0, 0.0, 1.0, 0.0, 0.0023, 0.0, 0.0, 0.8775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 0.3846, 0.0, 0.0, 1.0, 0.0001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0023, 0.0001, 1.0, 0.7914, 0.0, 0.0, 0.0, 0.0617, 0.0, 0.0, 0.9938, 0.0, 0.0, 0.0007},
        // //     {0.0, 0.0, 0.0, 0.0, 0.0003, 0.0, 0.0, 0.0, 0.7914, 1.0, 0.0, 0.0, 0.0001, 0.0091, 0.0, 0.2503, 0.0222, 0.0549, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 0.0014, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008},
        // //     {0.0, 0.0, 0.0016, 0.0, 0.0, 0.0, 0.8775, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7007, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 0.0, 0.9927, 0.0, 0.0, 0.0, 0.0001, 0.0, 0.0, 1.0, 0.0, 0.9978, 0.0, 0.0, 0.0, 0.0, 0.0},
        // //     {0.0, 0.0138, 0.0, 0.0102, 0.0, 0.0, 0.0, 0.0, 0.0617, 0.0091, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0003, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9978, 0.0, 1.0, 0.0012, 0.0, 0.0, 0.0, 0.0074},
        // //     {0.0, 0.0, 0.0, 0.7715, 0.0063, 0.9722, 0.0, 0.0, 0.0, 0.2503, 0.0, 0.0, 0.0, 0.0, 0.0012, 1.0, 0.0026, 0.0217, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9938, 0.0222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0026, 1.0, 0.0, 0.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0549, 0.0, 0.0, 0.0, 0.0003, 0.0, 0.0217, 0.0, 1.0, 0.0007, 0.0},
        // //     {0.2964, 0.0, 0.0747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007, 1.0, 0.0},
        // //     {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007, 0.0, 0.0008, 0.0, 0.0, 0.0, 0.0074, 0.0, 0.0, 0.0, 0.0, 1.0}
        // // };
    

            // // ----------------Xtensor test----------------
        // xt::xarray<double> xtens = {{1,2,3},{4,5,6},{7,8,9}};
        // xt::xarray<double> xvec = {1, 2, 3};
        // start = high_resolution_clock::now();
        // xt::xarray<double> xresult= xt::linalg::tensordot(xtens, xvec, {0}, {0});
        // stop = high_resolution_clock::now();
        // duration = duration_cast<microseconds>(stop - start);
    
        // cout << "x tensor " << xresult << endl;
        // cout << "time sec " << duration.count()*1e-6 << endl << endl;
    
        // //  ----------------Eigen test----------------
        // Matrix<double, 3, 3> eigens = (Matrix<double, 3, 3>() << 1, 2, 3, 4, 5, 6, 7, 8, 9).finished();
        // Vector3d eivec(1, 2, 3);
    
        // // Measure execution time
        // start = high_resolution_clock::now();
        // Vector3d eiresult = eigens.transpose() * eivec;
        // stop = high_resolution_clock::now();
        // duration = duration_cast<microseconds>(stop - start);
    
        // // Output results
        // cout << "Eigen tensor: " << eiresult.transpose() << endl;
        // cout << "time sec " << duration.count() * 1e-6 << endl << endl;;
    
        // //  ----------------Fastor test----------------
        // // Define the tensor and vector
        // Tensor<double, 3, 3> ftens = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        // Tensor<double, 3> fvec = {1, 2, 3};
    
        // // Start the timer
        // start = high_resolution_clock::now();
    
        // // Perform the tensor contraction using einsum
        // Tensor<double, 3> fresult = einsum<Fastor::Index<0, 1>, Fastor::Index<0>>(ftens, fvec);
    
        // // Stop the timer
        // stop = high_resolution_clock::now();
        // duration = duration_cast<microseconds>(stop - start);
    
        // // Output the result
        // cout << "Fastor tensor (einsum equivalent): ";
        // for (size_t i = 0; i < 3; ++i) {
        //     cout << fresult(i) << " ";
        // }
        // cout << endl;
        // cout << "time: " << duration.count() * 1e-6 << " seconds" << endl << endl;
    
        // //  ----------------Test Fastor templating----------------
        // try {
        //     // Example: Create a 2x3 tensor
        //     auto tensor = createFastorTensor<double, 2, 3>({1, 2, 3, 4, 5, 6});
        //     std::cout << "Created Tensor:\n" << tensor << std::endl;
        // } catch (const std::exception& ex) {
        //     std::cerr << "Error: " << ex.what() << std::endl;
        // }
    
        // std::cout << "\n";